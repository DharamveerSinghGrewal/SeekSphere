Elixir is a functional, concurrent, high-level general-purpose programming language that runs on the BEAM virtual machine, which is also used to implement the Erlang programming language. Elixir build...

Elixir is a functional, concurrent, high-level general-purpose programming language that runs on the BEAM virtual machine, which is also used to implement the Erlang programming language. Elixir builds on top of Erlang and shares the same abstractions for building distributed, fault-tolerant applications. Elixir also provides tooling and an extensible design. The latter is supported by compile-time metaprogramming with macros and polymorphism via protocols.
The community organizes yearly events in the United States, Europe, and Japan, as well as minor local events and conferences.


== History ==
Jos√© Valim created the Elixir programming language as a research and development project at Plataformatec. His goals were to enable higher extensibility and productivity in the Erlang VM while maintaining compatibility with Erlang's ecosystem.
Elixir is aimed at large-scale sites and apps. It uses features of Ruby, Erlang, and Clojure to develop a high-concurrency and low-latency language. It was designed to handle large data volumes. Elixir is also used in telecommunications, e-commerce, and finance.
In 2021, the Numerical Elixir effort was announced with the goal of bringing machine learning, neural networks, GPU compilation, data processing, and computational notebooks to the Elixir ecosystem.


== Versioning ==
Each of the minor versions supports a specific range of Erlang/OTP versions. The current stable release version is 1.18.0 .


== Features ==
Compiles to bytecode for the BEAM virtual machine of Erlang. Full interoperability with Erlang code, without runtime impact.
Scalability and fault-tolerance, thanks to Erlang's lightweight concurrency mechanisms
Built-in tooling for managing dependencies, code compilation, running tests, formatting code, remote debugging and more.
An interactive REPL inside running programs, including Phoenix web servers, with code reloading and access to internal state
Everything is an expression
Pattern matching to promote assertive code
Type hints for static analysis tools
Immutable data, with an emphasis, like other functional languages, on recursion and higher-order functions instead of side-effect-based looping
Shared nothing concurrent programming via message passing (actor model)
Lazy and async collections with streams
Railway oriented programming via the with construct
Hygienic metaprogramming by direct access to the abstract syntax tree (AST). Libraries often implement small domain-specific languages, such as for databases or testing.
Code execution at compile time. The Elixir compiler also runs on the BEAM, so modules that are being compiled can immediately run code which has already been compiled.
Polymorphism via a mechanism called protocols. Dynamic dispatch, as in Clojure, however, without multiple dispatch because Elixir protocols dispatch on a single type.
Support for documentation via Python-like docstrings in the Markdown formatting language
Unicode support and UTF-8 strings


== Examples ==
The following examples can be run in an iex shell or saved in a file and run from the command line by typing elixir <filename>.
Classic Hello world example:

Pipe operator:

Pattern matching (a.k.a. destructuring):

Pattern matching with multiple clauses:

List comprehension:

Asynchronously reading files with streams:

Multiple function bodies with guards:

Relational databases with the Ecto library:

Sequentially spawning a thousand processes:

Asynchronously performing a task:


== See also ==

Concurrent computing
Distributed computing
Parallel computing


== References ==


== Further reading ==
Simon St. Laurent; J. Eisenberg (December 22, 2016). Introducing Elixir: Getting Started in Functional Programming 2nd Edition. O'Reilly Media. ISBN 978-1491956779.
Sasa Juric (January 12, 2019). Elixir in Action 2nd Edition. Manning Publications. ISBN 978-1617295027.