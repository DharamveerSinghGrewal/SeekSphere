In software engineering and development, a software metric is a standard of measure of a degree to which a software system or process possesses some property. Even if a metric is not a measurement (me...

In software engineering and development, a software metric is a standard of measure of a degree to which a software system or process possesses some property. Even if a metric is not a measurement (metrics are functions, while measurements are the numbers obtained by the application of metrics), often the two terms are used as synonyms. Since quantitative measurements are essential in all sciences, there is a continuous effort by computer science practitioners and theoreticians to bring similar approaches to software development. The goal is obtaining objective, reproducible and quantifiable measurements, which may have numerous valuable applications in schedule and budget planning, cost estimation, quality assurance, testing, software debugging, software performance optimization, and optimal personnel task assignments.


== Common software measurements ==
Common software measurements include:

ABC Software Metric
Balanced scorecard
Bugs per line of code
Code coverage
Cohesion
Comment density
Connascent software components
Constructive Cost Model
Coupling
Cyclomatic complexity (McCabe's complexity)
Cyclomatic complexity density
Defect density - defects found in a component
Defect potential - expected number of defects in a particular component
Defect removal rate
DSQI (design structure quality index)
Function Points and Automated Function Points, an Object Management Group standard
Halstead Complexity
Instruction path length
Maintainability index
Source lines of code - number of lines of code
Program execution time
Program load time
Program size (binary)
Weighted Micro Function Points
Cycle time (software)
First pass yield
Corrective Commit Probability


== Limitations ==
As software development is a complex process, with high variance on both methodologies and objectives, it is difficult to define or measure software qualities and quantities and to determine a valid and concurrent measurement metric, especially when making such a prediction prior to the detail design. Another source of difficulty and debate is in determining which metrics matter, and what they mean.
The practical utility of software measurements has therefore been limited to the following domains:

Scheduling
Software sizing
Programming complexity
Software development effort estimation
Software quality
A specific measurement may target one or more of the above aspects, or the balance between them, for example as an indicator of team motivation or project performance.

Additionally metrics vary between static and dynamic program code, as well as for object oriented software (systems).


== Acceptance and public opinion ==
Some software development practitioners point out that simplistic measurements can cause more harm than good. Others have noted that metrics have become an integral part of the software development process.
Impact of measurement on programmer psychology have raised concerns for harmful effects to performance due to stress, performance anxiety, and attempts to cheat the metrics, while others find it to have positive impact on developers value towards their own work, and prevent them being undervalued. Some argue that the definition of many measurement methodologies are imprecise, and consequently it is often unclear how tools for computing them arrive at a particular result, while others argue that imperfect quantification is better than none (“You can’t control what you can't measure.”). Evidence shows that software metrics are being widely used by government agencies, the US military, NASA, IT consultants, academic institutions, and commercial and academic development estimation software.


== Further reading ==
J. Smith, Introduction to Linear Programming, Acme Press, 2010. An introductory text.
Reijo M.Savola, Quality of security metrics and measurements, Computers & Security, Volume 37, September 2013, Pages 78-90.


== See also ==
Goal Question-Metric
List of tools for static code analysis
Orthogonal Defect Classification
Software engineering
Software package metrics


== References ==


== External links ==
Software Metrics (SQA.net)
Software Engineering Metrics: What do they measure and how do we know
NASA Standard NASA-STD-8739.8 (Software Assurance and Software Safety Standard)
HIS Source Code Metrics (outdated but for reference; related see AUTOSAR)
HIS Source Code Metrics version 1.3.1 01.04.2008 (outdated but for reference; related see AUTOSAR)
A framework for source code metrics
NASA.gov
SonarQube Metric Definitions
Metrics of Object Oriented Software (2010)